The dataset is a historical record of the Olympic Games, covering all events from Athens 1896 to Beijing 2022. It contains detailed information on over 21,000 medals, 162,000 results, 74,000 athletes, 20,000 biographies and 53 hosts of the Summer and Winter Olympic Games. The data were originally organized into 4 CSV files containing information on the athletes, hosts, medals, and results of the Olympic Games. We then used this data to create nodes and edges in Neo4j, forming a graph that emphasized the relationships we found meaningful.

We chose a graph database for its intuitive nature and its strong capability to visualize data nodes and relationships. For a company dealing with complex data, a database that offers robust visualization features is highly efficient and advantageous. Moreover, consistency and availability are very important for our database. Considering these qualities in the context of the CAP theorem (Brewer's theorem), Neo4j would be the best non-relational DBMS for us.

Since we had problems with the Result table because of its dimensions we initially created the nodes by using a smaller version choosing a significant amount of data by processing the table with Python. 

We initially attempted to adjust the memory allocation, but later we chose a different solution by using "apoc.periodic.iterate" to process the data in batches. This extended the functionality of our Neo4j database, allowing us to import all the data, enabling us to compare Neo4j query results with those from MySQL. 

Since creating an edge involves performing a Cartesian product between the nodes, and we have nodes with a large amount of data, we used the APOC library to handle some of the edges efficiently.

#################################NODES###################################

#########
#Athlete#
#########
LOAD CSV WITH HEADERS FROM 'file:///olympic_athletes_new.csv' AS row

CREATE (:Athlete {

ID_athletes: toInteger(row.ID_athletes),

athlete_full_name:  row.athlete_full_name,

games_participations:toInteger(row.games_participations),

first_game: row.first_game,

athlete_year_birth: toInteger(row.athlete_year_birth)});

######
#Host#
######
LOAD CSV WITH HEADERS FROM 'file:///olympic_hosts_new.csv' AS row

CREATE (:Host {

ID_hosts: toInteger(row.ID_hosts),

game_slug: row.game_slug,

game_end_date: row.game_end_date,

game_start_date: row.game_start_date,

game_location: row.game_location,

game_name: row.game_name,

game_season: row.game_season,

game_year: toInteger(row.game_year)});


############
#Discipline#
############
CALL apoc.periodic.iterate(

'LOAD CSV WITH HEADERS FROM "file:///IndividualGame.csv" AS row RETURN row',

'MERGE (d:Discipline {

discipline_title: row.discipline_title,

slug_game: row.slug_game,

event_title: row.event_title

})',

{batchSize: 500, parallel: false, retries: 3}

)

YIELD batches, total, errorMessages

RETURN batches, total, errorMessages

#######
#Event#
#######
CALL apoc.periodic.iterate(

'LOAD CSV WITH HEADERS FROM "file:///IndividualGame.csv" AS row RETURN row',

'MERGE (e:Event {

event_title: row.event_title,

slug_game: row.slug_game,

discipline_title : row.discipline_title,

athlete_full_name: row.athlete_full_name

})

WITH e, row

WHERE row.rank_position IS NOT NULL

SET e.rank_position = row.rank_position',

{batchSize: 500, parallel: true, retries: 3}

)

YIELD batches, total, errorMessages

RETURN batches, total, errorMessages

CALL apoc.periodic.iterate(

'MATCH (e:Event) WHERE e.rank_position IS NOT NULL RETURN e',

'REMOVE e.rank_position',

{batchSize: 1000, parallel: false, retries: 3}

)

YIELD batches, total, errorMessages

RETURN batches, total, errorMessages

#########
#Country#
#########
CALL apoc.periodic.iterate(

'LOAD CSV WITH HEADERS FROM "file:///IndividualGame.csv" AS row RETURN row',

'MERGE (c:Country {

country_name: row.country_name,

athlete_full_name: row.athlete_full_name

})',

{batchSize: 1000, parallel: false}

)

YIELD batches, total, errorMessages

RETURN batches, total, errorMessages

########
#Medals#
########
LOAD CSV WITH HEADERS FROM 'file:///olympic_medals_new.csv' AS row

CREATE (m:Medal {

ID_medals: toInteger(row.ID_medals),

discipline_title: row.discipline_title,

slug_game: row.slug_game,

event_title: row.event_title,

event_gender: row.event_gender,

medal_type: row.medal_type,

participant_type: row.participant_type,

athlete_full_name : row.athlete_full_name

})

#################################EDGES###################################

#################################
#relationship discipline - event#
#################################

CALL apoc.periodic.iterate(

'MATCH (e:Event), (d:Discipline) WHERE e.slug_game = d.slug_game AND d.discipline_title = e.discipline_title AND e.event_title = d.event_title RETURN e, d',

'MERGE (e)-[:BELONGS_TO]->(d)',

{batchSize: 500, parallel: false, retries: 3}

)

YIELD batches, total, errorMessages

RETURN batches, total, errorMessages

##########################
#relationship event- host#
##########################

MATCH (e:Event), (h:Host)

WHERE e.slug_game = h.game_slug

MERGE (e)-[:HELD_IN]->(h)

############################
#relationship athlete-event#
############################

CALL apoc.periodic.iterate(

'MATCH (a:Athlete), (e:Event) WHERE a.athlete_full_name = e.athlete_full_name RETURN a, e',

'MERGE (a)-[r:PARTICIPATED_IN]->(e) WITH r, e WHERE e.rank_position IS NOT NULL SET r.rank_position = e.rank_position',

{batchSize: 500, parallel: false, retries: 3}

)

YIELD batches, total, errorMessages

RETURN batches, total, errorMessages

##############################
#relationship athlete-country#
##############################

CALL apoc.periodic.iterate(

'MATCH (a:Athlete), (c:Country)

WHERE a.athlete_full_name = c.athlete_full_name

RETURN a, c',

'MERGE (a)-[:REPRESENTS]->(c)',

{batchSize: 500, parallel: false, retries: 3}

)

YIELD batches, total, errorMessages

RETURN batches, total, errorMessages

#############################
#relationship athlete-medals#
#############################

MATCH (a:Athlete), (m:Medal)

WHERE a.athlete_full_name = m.athlete_full_name

MERGE (a)-[:WON]->(m)

#relationship medals-host

MATCH (m:Medal), (h:Host)

WHERE m.slug_game = h.game_slug

MERGE(m)-[:AWARDED_IN]->(h)

#################################QUERY###################################

#########
#Query 1#
#########

//All athletes who have taken part in more than 3 individual Olympic Games ("Athletes" in the result table) with the respective country

MATCH (a:Athlete)-[:REPRESENTS]->(c:Country)

WHERE a.games_participations > 3

RETURN DISTINCT a.athlete_full_name AS athlete_full_name, a.games_participations AS game_participations, c.country_name AS country_name

ORDER BY a.games_participations DESC

LIMIT 10

#running time Cypher:  48 ms
#AVG execution Time MySQL : 0.415 sec

#########
#Query 2#
#########

//How many people won a gold or silver medal in the Summer Olympic that were held between 1896 and 1956

MATCH (m:Medal)-[:AWARDED_IN]->(h:Host)

WHERE h.game_year >= 1896 AND h.game_year <= 1956

AND m.medal_type IN ['GOLD', 'SILVER']

AND h.game_season = 'Summer'

WITH h.game_location AS location, h.game_year AS year, COUNT(m) AS athlete_count

RETURN location, year, athlete_count

ORDER BY year ASC

#running time Cypher : 62 ms
#AVG execution Time MySQL: 0.040 sec

#########
#Query 3#
#########

//Number of participants in Japanese summer women's matches with the event and discipline title

MATCH (c:Country)<-[:REPRESENTS]-(a)-[r:PARTICIPATED_IN]->(e:Event)-[:HELD_IN]->(h:Host)

WHERE (e.event_title CONTAINS 'women' OR e.event_title CONTAINS 'Women')

AND h.game_season = 'Summer'

AND c.country_name = 'Japan'

WITH h.game_year AS year, h.game_location AS location, COUNT(e) AS num_participants

RETURN year, location, num_participants

ORDER BY year ASC

#running time Cypher :  127 ms
#AVG execution Time MySQL : 0.616 sec

#########
#Query 4#
#########

//For every athlete, the number of individual Olympic Games, during the pandemic (2019-2022), in which each athlete participated but did not win, along with the worst rank they achieved

MATCH (c:Country)<-[:REPRESENTS]-(a:Athlete)-[r:PARTICIPATED_IN]->(e:Event)-[:BELONGS_TO]->(d:Discipline),(e)-[:HELD_IN]->(h:Host)

WHERE h.game_start_date >= '2019-01-01 00:00:00' AND

h.game_end_date <= '2022-12-31 23:59:59' AND

r.rank_position <> 'WDR' AND

NOT (a)-[:WON]->(:Medal {medal_type: 'Gold'}) AND

NOT (a)-[:WON]->(:Medal {medal_type: 'Silver'}) AND

NOT (a)-[:WON]->(:Medal {medal_type: 'Bronze'})

WITH a.athlete_full_name AS athlete, c.country_name AS country, r.rank_position AS position, d.discipline_title AS discipline_title

WITH athlete, country, discipline_title, MAX(position) AS worst_rank, COUNT(position) AS games_lost

RETURN athlete, country, worst_rank, games_lost, discipline_title

ORDER BY games_lost DESC

#running time Cypher  :  207 ms
#AVG execution Time MySQL: 0.487 sec	

####################
#Query 5 - 1st part#
####################

//All participants, with less than 40 years old, of individual Olympic games who have won more medals than the oldest champion (>= 40)

MATCH (a2:Athlete)-[:WON]->(m2:Medal)

WHERE a2.athlete_year_birth < date().year - 40

AND m2.participant_type = 'Athlete'

WITH a2.athlete_full_name AS old_name, COUNT(m2.medal_type) AS old_medals

RETURN MAX(old_medals) AS max_old_medals

//[14] #running time Cypher :  72 ms

####################
#Query 5 - 2nd part#
####################

WITH 14 AS max_old_medals  // Replace 5 with the actual max_old_medals value obtained from the previous step

MATCH (c:Country)<-[:REPRESENTS]-(a:Athlete)-[:WON]->(m:Medal)

WHERE a.athlete_year_birth > date().year - 40

AND m.participant_type = 'Athlete'

WITH a.athlete_full_name AS name,

a.athlete_year_birth AS year_birth,

m.discipline_title AS discipline,

c.country_name AS country,

COUNT(m.medal_type) AS medals,

max_old_medals

WHERE medals > max_old_medals

RETURN name, year_birth, medals, discipline, country

ORDER BY medals DESC

#running time Cypher  :  61 ms
#AVG execution Time MySQL: 0.481 sec

#########
#Query 6#
#########

//For each year, the number of gold medals won by athletes taking part in the Winter Olympic Games, with the average age of the athletes per Games year

MATCH (m:Medal)-[:AWARDED_IN]->(h:Host), (m)<-[:WON]-(a:Athlete)

WHERE m.medal_type = 'GOLD'

AND h.game_season = 'Winter'

WITH h.game_year AS year, a.athlete_year_birth AS birth_year, m AS medals

WITH year, AVG(year - birth_year) AS average_age, COUNT(medals) AS gold_medals

RETURN year, gold_medals, round(average_age,4) as average_age

ORDER BY year ASC

#running time Cypher :  9 ms
#AVG execution Time MySQL: 0.250 sec

#########
#Query 7#
#########

//Select the distinct full names and the number of games participated in by athletes who were born after 1994 and have not won more than one medal. It orders the results by the number of games participated in, in descending order

MATCH (a:Athlete)-[:WON]->(m:Medal)

WITH a.athlete_full_name AS athlete_full_name,

a.games_participations AS games_participations,

a.athlete_year_birth AS athlete_year_birth,

COUNT(m.medal_type) AS medal_count

WHERE medal_count > 1 AND athlete_year_birth > 1994

RETURN athlete_full_name, games_participations, medal_count

ORDER BY medal_count DESC

#running time Cypher :  68 ms
#AVG execution Time optimized MySQL: 0.119 sec

#########
#Query 8#
#########

//Medal type and host of the games won by Italian athletes, age < 25, at the Olympic Summer Games in Tokyo

MATCH (c:Country)<-[:REPRESENTS]-(a:Athlete)-[:WON]->(m:Medal)-[:AWARDED_IN]->(h:Host)

WHERE m.slug_game STARTS WITH "tokyo-"

AND c.country_name = "Italy"

AND date().year - a.athlete_year_birth < 25

AND h.game_season = "Summer"

RETURN DISTINCT m.athlete_full_name, m.slug_game, m.discipline_title, m.medal_type

#running time Cypher :  26 ms
#AVG execution Time optimized MySQL: 0.038 sec

#########
#Query 9#
#########

//Find the athlete, among the individual olimpic games, with the highest number of "DNF", "DNS", "DNC" rank positions (with at least one DNF and one DNS) in the olimpic game that has the highest number of such rank positions

MATCH (a:Athlete)-[r:PARTICIPATED_IN]->(e:Event)-[:HELD_IN]->(h:Host)

WHERE r.rank_position IN ['DNF', 'DNS', 'DNC']

WITH h.game_slug AS slug_game, COUNT(r) AS dnf_dns_dnc_total

ORDER BY dnf_dns_dnc_total DESC

LIMIT 1

WITH slug_game AS selected_slug_game

MATCH (c:Country)<-[:REPRESENTS]-(a:Athlete)-[r:PARTICIPATED_IN]->(e:Event)-[:HELD_IN]->(h:Host)

WHERE h.game_slug = selected_slug_game

AND r.rank_position IN ['DNF', 'DNS', 'DNC']

WITH a.athlete_full_name AS athlete,

c.country_name AS country,

h.game_slug AS slug_game,

SUM(CASE WHEN r.rank_position IN ['DNF', 'DNS', 'DNC'] THEN 1 ELSE 0 END) AS dnf_dns_dnc_count,

SUM(CASE WHEN r.rank_position IN ['DNF', 'DNS'] THEN 1 ELSE 0 END) AS dnf_dns_count

WHERE dnf_dns_count > 2

RETURN athlete, country, dnf_dns_dnc_count, slug_game

ORDER BY dnf_dns_dnc_count DESC

LIMIT 1

#running time Cypher :  122 ms
#AVG execution Time optimized MySQL: 0.471 sec

##########
#Query 10#
##########

//Selects the athlete's full name, country name, game name, and game location of those who were born after 1980 and have won more than one gold medal in the Olympic Games hosted by their own country, considering only the games held between 1980 and 2020

MATCH(c:Country)<-[:REPRESENTS]-(a:Athlete)-[:WON]->(m:Medal)-[:AWARDED_IN]->(h:Host)

WHERE m.medal_type = "GOLD"

AND a.athlete_year_birth > 1980

AND h.game_location = c.country_name

WITH a, m, h, c

MATCH (c:Country)<-[:REPRESENTS]-(a:Athlete)-[:WON]->(m2:Medal)-[:AWARDED_IN]->(h2:Host)

WHERE m2.medal_type = "GOLD"

AND h2.game_location = c.country_name

AND h2.game_year >= 1980

AND h2.game_year <= 2020

WITH a, m, h, c, COUNT(m2) AS gold_medal_count

WHERE gold_medal_count > 1

RETURN DISTINCT m.athlete_full_name, c.country_name, h.game_name, h.game_location

#running time Cypher : 42 ms
#AVG execution Time optimized MySQL: 0.043 sec	

We executed both MYSQL and Neo4j queries on the same laptop, therefore the running times are comparable.

We observed that although there isn't much difference between the syntax of Neo4j and MySQL for queries, the performance varies significantly: queries that take minutes or seconds in MySQL take milliseconds in Neo4j. This is because relational databases like MySQL use tables and JOIN operations to handle relationships, which can be complex and less efficient for interconnected data. In contrast, graph databases like Neo4j use nodes and relationships, making it easier to model and query interconnected data efficiently by avoiding costly JOIN operations. They also offer flexibility with schema-less or adaptable schemas, enabling more agile data model changes.

MySQL queries often require subqueries, nested queries, and grouping. In contrast, Neo4j's queries are more straightforward, directly traversing relationships and making them more intuitive for connected data. Neo4j’s query structure, which involves multiple stages with **`WITH`** clauses to carry intermediate results, is efficient for handling complex relationships. Additionally, graph databases allow for the retrieval of up-to-date information.